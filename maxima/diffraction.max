

/* get fourier transform of a rectangle with size a and area 1*/
trigsimp(demoivre(integrate(exp(-%i*x*k)/a,x,-a/2,a/2)));
/* result: sin(a k/2)/(a k/2) = sinc(k a/2) */
plot2d([sin(k*1/2)/(k/2),.3*sin(k*1/2)/(k/2)],[k,-100,100],[plot_format,gnuplot],[legend,sinc],[gnuplot_term,"postscript eps size 5.5,2.52 enhanced color font 'Helvetica,22'"],[gnuplot_out_file,"| epstopdf --filter --outfile=/dev/shm/o.pdf"],[style,[lines,8]]);

/* mono output for epaper */
plot2d([sin(k*1/2)/(k/2),.3*sin(k*1/2)/(k/2)],[k,-100,100],[plot_format,gnuplot],[legend,sinc],[gnuplot_term,"postscript eps size 5.5,2.52 enhanced color font 'Helvetica,22'"],[gnuplot_out_file,"| gs -sDEVICE=x11mono"],[style,[lines,8]]);
sinc(x) := sin(x)/x;
/* intensity of first term of diffraction expression for many pixels */
map(set_plot_option,[[plot_format,gnuplot],[gnuplot_term,"postscript eps size 6cm,4cm enhanced color font 'Helvetica,22'"],[gnuplot_out_file,"| epstopdf --filter --outfile=/dev/shm/o.pdf"]]);
plot2d(block([N:10,dx:16],cabs(sum(exp(%i*kx*p*dx),p,-floor(N/2),floor(N/2)+1))^2),[kx,-1,1],[style,[lines,8]],[xlabel,"k_x"],[ylabel,"intensity"]);
/* (local-set-key "\C-\M-x" maxima-send-form) */



/* calculate normalized diffraction spectrum */
intens(N):=block([NN:1024,xylist,ma],
  xylist:makelist(
    block([dx:16,
      kx:2*(k*1.0/NN-.5)],
      [kx, cabs(sum(exp(%i*kx*p*dx),p,-floor(N/2),floor(N/2)+1))^2])
    ,k,NN),
  ma:lmax(map(second,xylist)),
  maplist(lambda([xy],[first(xy),second(xy)/ma]),xylist));


int_big : intens(20)$
int_mid : intens(4)$
int_small:intens(1)$

secondmap(f,xylist):=map(lambda([xy],[first(xy),apply(f,[second(xy)])]),xylist);

map(set_plot_option,
  [[plot_format,gnuplot],
  [gnuplot_term,"pdfcairo size 5,4 rounded enhanced font 'Helvetica,10'"],
  [gnuplot_out_file,"/dev/shm/o.pdf"],
  [gnuplot_preamble,"set border linewidth 2; unset ytics;unset key; set label \"N=1\" at 0.1,3.2;"]]);

plot2d(
  [
  [discrete,secondmap(lambda([y],2.3+y),int_small)],
  [discrete,secondmap(lambda([y],1.2+y),int_mid)],
  [discrete,secondmap(lambda([y],.1+y),int_big)]],
  [style,[lines,6]],
  [color,"#aaa212","#1203aa"],
  [y,0,3.4],
  [xlabel,"k_x"],
  [ylabel,"intensity"]);

/*
four1(N,k,dx):=cabs(sum(exp(%i*k*p*dx),p,-N/2,N/2+1))^2;
plot2d([10*sqrt(four1(2,kx,16)),sqrt(four1(20,kx,16))],[kx,-1,1],[legend,"N=2","N=20"],[style,[lines,8]]);

/* only zero order when all pixels are undeflected */
block([N:20,dx:3],plot2d(cabs(sum(exp(%i*k*p*dx)*sinc(k*dx/2),p,-N/2,N/2+1))^2,[k,-3,3]));

/* all pixels tilted blaze angle */
block([N:20,dx:16],plot2d(cabs(sum(exp(%i*k*p*dx)*sinc(k*dx/2-%pi),p,-N/2,N/2+1))^2,[k,-1,1]));

/* half blaze angle */
block([N:20,dx:3],plot2d(cabs(sum(exp(%i*k*p*dx)*sinc(k*dx/2-.2*%pi),p,-N/2,N/2+1))^2,[k,-4.5,4.5]));

four(N,k,dx,kp):=cabs(sum(exp(%i*k*p*dx)*sinc(k*dx/2-kp),p,-N/2,N/2+1))^2;
plot2d([four(10,kx,16,.6*%pi),four(10,kx,16,%pi)],[kx,-1,1]);


/* random angle -- fixme doesn't make sense 
block([N:20,dx:3],plot2d(cabs(sum(exp(%i*k*p*dx)*sinc(k*dx/2-random(3.1415)),p,-N/2,N/2+1))^2,[k,-3,8]));
*/

/* intensity in zero order for different tilt angles */
/* kp %pi is blaze angle, kp=4.66 */
block([N:20,dx:3,k:0],plot2d(cabs(sum(exp(%i*k*p*dx)*sinc(k*dx/2-kp),p,-N/2,N/2+1))^2,[kp,0,%pi*2]));

/* the number of mirrors is not really important */
inten(N,kp,dx,k):=cabs(sum(exp(%i*k*p*dx)*sinc(k*dx/2-kp),p,-N/2,N/2+1))^2;
block([dx:3,k:.99*%pi],plot2d(inten(40,kp,dx,k),[kp,0,%pi*2]));
*/

